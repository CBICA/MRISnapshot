#!usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
from argparse import ArgumentParser, SUPPRESS
import os
import sys
import pandas as pd
from MRISnapshot import prep_dataset_main as pdm

## Set logger  ## FIXME to be updated
import logging
format='%(levelname)-8s [%(filename)s : %(lineno)d - %(funcName)20s()] %(message)s'
format='%(levelname)-8s %(message)s'
logging.basicConfig(level=logging.DEBUG, format = '\n' + format, datefmt='%Y-%m-%d:%H:%M:%S')
logger = logging.getLogger(__name__)

##logger.setLevel(logging.DEBUG)      ## While debugging
logger.setLevel(logging.INFO)    ## FIXME Debug comments will be removed in release version
FORMAT = "[%(filename)s:%(lineno)s - %(funcName)20s() ] %(message)s"

def usage_msg():
    """usage information"""
    descr = 'Helper script to prepare input files required for the QC report creation.\n\n' \
            'The script will create two files in the output folder (OUTDIR): \n' \
            '- list_images.csv: List of underlay (and optionally mask and overlay) image files. ' \
            ' The list is created by searching files with the given suffix (S_ULAY) in the input ' \
            'folder (INDIR);\n' \
            '- config.csv: a configuration file that includes all user parameters and their ' \
            'default values.\n\n' \
            'After running this script, users can manually edit the image list and/or the ' \
            'configuration file (optional), and run "snap_create_report OUTDIR" to create the ' \
            'QC report for their dataset and selected configuration.\n\n' \
            'See scripts in: test/Scripts for examples.\n'
    print(descr)    

if __name__ == "__main__":
    
    ## Create parser
    parser = argparse.ArgumentParser(add_help=False,
                                     prog="snap_prep_data",
                                     usage = usage_msg(),
                                     epilog = 'Contact: guray.erus@pennmedicine.upenn.edu')

    required = parser.add_argument_group('required arguments')
    optional = parser.add_argument_group('optional arguments')

    # Add back help 
    optional.add_argument(
        '-h',
        '--help',
        action = 'help',
        default = SUPPRESS,
        help = 'show this help message and exit'
    )
    
    #parser.add_argument("-i", dest="indir", type=str, help="Input image directory", required=True)
    #parser.add_argument("--ulay", dest="s_ulay", type=str, help="Suffix of underlay images", required=True)
    #parser.add_argument("-d", dest="outdir", type=str, help="Output directory", required=True)
    #parser.add_argument("--mask", dest="s_mask", type=str, help="Suffix of mask images", required=False)
    #parser.add_argument("--olay", dest="s_olay", type=str, help="Suffix of overlay images", required=False)
    #parser.add_argument("--olay2", dest="s_olay2", type=str, help="Suffix of second overlay images", required=False)

    required.add_argument("-i", dest="indir", type=str, required=True, help="Input image directory")
    required.add_argument("-s", dest="s_ulay", type=str, required=True, help="Suffix of underlay images")
    required.add_argument("-d", dest="outdir", type=str, required=True, help="Output directory")
    optional.add_argument("--mask", dest="s_mask", type=str, help = "Suffix of mask images")
    optional.add_argument("--olay", dest="s_olay", type=str, help = "Suffix of overlay images")
    optional.add_argument("--olay2", dest="s_olay2", type=str, help="Suffix of second overlay images")

    ## Parse input args
    params = parser.parse_args()

    logger.info('-----------------------------------------')    
    logger.info('Running : ' + ' '.join(sys.argv))
    logger.info('-----------------------------------------')    

    ## Update args
    params.in_dir = os.path.abspath(params.indir)
    params.out_dir = os.path.abspath(params.outdir)
    
    ## Prepare data
    logger.info('  Preparing image list and configuration file ...')
    pdm.prep_dataset(params)
    
    

