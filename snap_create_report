#!usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
import os
import sys
import pandas as pd
from MRISnapshot import create_report_main as crm 

## Set logger  ## FIXME to be updated
import logging
format='%(levelname)-8s [%(filename)s : %(lineno)d - %(funcName)20s()] %(message)s'
format='%(levelname)-8s %(message)s'
logging.basicConfig(level=logging.DEBUG, format = '\n' + format, datefmt='%Y-%m-%d:%H:%M:%S')
logger = logging.getLogger(__name__)

##logger.setLevel(logging.DEBUG)      ## While debugging
logger.setLevel(logging.INFO)    ## FIXME Debug comments will be removed in release version
FORMAT = "[%(filename)s:%(lineno)s - %(funcName)20s() ] %(message)s"

"""usage information"""
descr = r"""
----- Description -----

Generates QC report for MRI datasets. The QC report is an html file that contains 
snapshots of underlay and overlay (optional) images for a set of subjects. The full
path to input images should be given in a .csv list file. The underlay and overlay 
columns are defined by the column labels. The user can define how many slices, which 
view(s), what type of display (edge, transparent overlay) to display (see default 
config file). 

----- Usage -----

%s [OPTIONS]

OPTIONS (All Required):
[-r --run_dir     ] <path>     Reporting directory

----- Notes -----


----- Examples and tests -----

Test images, lists, configurations and output mriqc reports are provided in ../test

----- Contact -----

guray.erus\@uphs.upenn.edu

"""


if __name__ == "__main__":
    
    ## Create parser
    parser = argparse.ArgumentParser(
        prog="MRISnapshot",
        formatter_class = argparse.RawTextHelpFormatter,
        description="Create a QC report of the dataset",
    )
    parser.add_argument("-d", dest="run_dir", type=str, help="Directory to create the QC report", required=True)

    ## Parse input args
    args = parser.parse_args()
    
    logger.info('-----------------------------------------')    
    logger.info('Running : ' + ' '.join(sys.argv))    
    logger.info('-----------------------------------------')    

    ## Derive args
    run_dir = os.path.abspath(args.run_dir)    
    list_file = os.path.join(run_dir, 'list_images.csv')
    config_file = os.path.join(run_dir, 'config.csv')
    out_dir = os.path.join(run_dir, 'QCReport')
    
    ## Make out directory
    if os.path.exists(out_dir) == False:
        os.makedirs(out_dir)

    ## Create report
    crm.create_report(list_file, config_file, out_dir)
