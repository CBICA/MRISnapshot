#!usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
from argparse import ArgumentParser, SUPPRESS
import os
import sys
import pandas as pd
from MRISnapshot import create_report_main as crm 

import MRISnapshot.utils.mylogger as mylogger
logger = mylogger.logger

if __name__ == "__main__":
    
    descr = 'Script to generate the QC report for an input image dataset.\n\n' \
            'The output QC report is an html file that displays snapshots of underlay and overlay ' \
            '(optional) images. \n\n' \
            'Before running the script, users should create an output folder (OUTDIR), and create ' \
            'two files in it: \n' \
            '- list_images.csv: List of underlay (and optionally mask and overlay) image files. \n' \
            '- config.csv: a configuration file that includes user parameters and their values.\n\n' \
            'Users can use the script "snap_prep_data" to prepare these two files, and edit them ' \
            'for their specific dataset and parameter selection.\n\n' \
            'See scripts in: test/Scripts for examples.\n'

    ## Create parser
    parser = argparse.ArgumentParser(add_help=False,
                                     prog="snap_create_report",
                                     formatter_class=argparse.RawDescriptionHelpFormatter,                              
                                     description = descr,
                                     epilog = 'Contact: guray.erus@pennmedicine.upenn.edu')
    required = parser.add_argument_group('required arguments')
    optional = parser.add_argument_group('optional arguments')

    # Add back help 
    optional.add_argument(
        '-h',
        '--help',
        action = 'help',
        default = SUPPRESS,
        help = 'show this help message and exit'
    )

    required.add_argument("-d", dest="outdir", type=str, required=True, help="Output directory")

    ## Parse input args
    args = parser.parse_args()
    
    logger.info('-----------------------------------------')    
    logger.info('Running : ' + ' '.join(sys.argv))    
    logger.info('-----------------------------------------')    

    ## Derive args
    outdir = os.path.abspath(args.outdir)    
    list_file = os.path.join(outdir, 'list_images.csv')
    config_file = os.path.join(outdir, 'config.csv')
    report_dir = os.path.join(outdir, 'QCReport')
    
    ## Make out directory
    if os.path.exists(report_dir) == False:
        os.makedirs(report_dir)

    ## Create report
    crm.create_report(list_file, config_file, report_dir)
